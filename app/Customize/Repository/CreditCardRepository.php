<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Customize\Entity\CreditCard;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\QueryBuilder;
use Eccube\Doctrine\Query\Queries;
use Eccube\Entity\Customer;
use Eccube\Util\StringUtil;
use Eccube\Repository\AbstractRepository;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CreditCardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CreditCardRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    public const COLUMNS = [
        'id' => 'c.id'
        ,'credit_card_type' => 'c.credit_card_type'
        ,'credit_card_number' => 'c.credit_card_number'
        ,'holder_name' => 'c.holder_name'
        ,'expiration_date' => 'c.expiration_date'
        ,'security_code' => 'c.security_code'
        ,'create_date' => 'c.create_date'
        ,'update_date' => 'c.update_date'
    ];

    /**
     * CreditCardRepository constructor.
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CreditCard::class);
    }

    /**
     * @param  \Eccube\Entity\Customer $Customer
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderByCustomerID(Customer $Customer)
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.customer_id = :Customer_id')
            ->setParameter('Customer_id', $Customer->getId())
            ->addOrderBy('c.id', 'DESC');

//        dump($qb->getQuery()->getSql());die();
//        dump($qb->getParameters());die();

        return $qb;
    }

    /**
     * クレジットカードを追加します.
     * 
     * @param \Customize\Entity\CreditCard  $creditCard
     */
    public function addCreditCard(\Customize\Entity\CreditCard $creditCard)
    {
        $em = $this->getEntityManager();
        $em->persist($creditCard);
        $em->flush();
    }

    

    /**
     * クレジットカードを削除します.
     *
     * @param \Customize\Entity\CreditCard  $creditCard
     */
    public function deleteCreditCard($creditCard)
    {
        $em = $this->getEntityManager();
        $em->remove($creditCard);
        $em->flush();
    }

    /**
     * Prepare attributes for entity
     * replace foreign keys with entity instances
     *
     * @param array $attributes entity attributes
     * @return array modified attributes values
     */
    public function prepareAttributes(array $attributes)
    {
        foreach ($attributes as $fieldName => &$fieldValue) {
            if (!$this->getClassMetadata()->hasAssociation($fieldName)) {
                continue;
            }

            $association = $this->getClassMetadata()
                ->getAssociationMapping($fieldName);

            if (is_null($fieldValue)) {
                continue;
            }

            $fieldValue = $this->getEntityManager()
                ->getReference($association['targetEntity'], $fieldValue);

            unset($fieldValue);
        }

        return $attributes;
    }
}
